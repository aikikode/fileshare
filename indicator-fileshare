#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012
#
# Authors: Denis Kovalev <aikikode@gmail.com>
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of either or both of the following licenses:
#
# 1) the GNU Lesser General Public License version 3, as published by the
# Free Software Foundation; and/or
# 2) the GNU Lesser General Public License version 2.1, as published by
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the applicable version of the GNU Lesser General Public
# License for more details.
#
# You should have received a copy of both the GNU Lesser General Public
# License version 3 and version 2.1 along with this program.  If not, see
# <http://www.gnu.org/licenses>
#

import sys, os, shutil, tempfile
import ConfigParser
import gtk
import appindicator
import threading
import webbrowser
import logging, logging.handlers
import commands
# to unquote cyrllic file names and spaces
import urllib2
# for uploading
import pycurl
import base64
# for parsing server response
import xml.dom.minidom
# for delayed actions
import gobject
# for screen area grabber colors
import cairo

gobject.threads_init()

VERSION = "0.3.0"
FILE_GRABBER_SIZE = 50
# API v3
CLIENT_ID = "813588ae4b2b41a"
CLIENT_SECRET = "1cc11d1006c90d0e184daa29085a015e24cd6705"

CONFIG_FILE = "~/.fileshare/settings.cfg"


##############################################################################
class SingleInstance(object):
    """ Class to ensure, that single instance of the applet is run for each user """

    # Initialize, specifying a path to store pids
    def __init__(self, pidPath):
        self.pidPath = pidPath
        # See if pidFile exists
        if os.path.exists(pidPath):
            log.debug("SingleInstance: pid file %s exists" % pidPath)
            # Make sure it is not a "stale" pidFile
            pid = open(pidPath, 'r').read().strip()
            # Check list of running pids, if not running it is stale so overwrite
            pidRunning = commands.getoutput('ls -1 /proc | grep ^%s$' % pid)
            log.debug("SingleInstance: pid running %s" % pidRunning)
            self.lasterror = True if pidRunning else False
        else:
            self.lasterror = False

        if not self.lasterror:
            log.debug("SingleInstance: writing new pid %s" % str(os.getpid()))
            # Create a temp file, copy it to pidPath and remove temporary file
            (fp, temp_path) = tempfile.mkstemp()
            try:
                os.fdopen(fp, "w+b").write(str(os.getpid()))
                shutil.copy(temp_path, pidPath)
                os.unlink(temp_path)
            except Exception as e:
                log.error("SingleInstance: exception while renaming '%s' to '%s':\n %s" % (temp_path, pidPath, str(e)))

    #def __init__(self, pidPath)

    def is_already_running(self):
        return self.lasterror

    def __del__(self):
        if not self.lasterror:
            log.debug("SingleInstance: deleting %s" % self.pidPath)
            os.unlink(self.pidPath)
            #def __del__(self)

#class SingleInstance(object)


##############################################################################
class IndicatorFileshare(threading.Thread):
    def __init__(self):
        log.debug("Indicator: creating")
        threading.Thread.__init__(self)
        self.read_settings()
        self.check_autostart()
        self.ind = appindicator.Indicator("fileshare-services-client",
                                          "indicator-fileshare",
                                          appindicator.CATEGORY_APPLICATION_STATUS)
        self.ind.set_status(appindicator.STATUS_ACTIVE)
        self.ind.set_icon("/usr/local/share/indicator-fileshare/media/app_icon.png")
        self.file_grabber = FileGrabber()
        self.create_menu()

    def read_settings(self):
        config = ConfigParser.RawConfigParser()
        try:
            config.read(CONFIG_FILE)
            self.final_token = config.get("Auth", "final_token")
            self.final_token_secret = config.get("Auth", "final_token_secret")
        except:
            self.final_token = None
            self.final_token_secret = None

    #def read_settings(self)

    def check_autostart(self):
        autostart_dir = os.path.join(os.path.expanduser("~"), ".config/autostart/")
        autostart_file = "indicator-fileshare.desktop"
        autostart_path = os.path.join(autostart_dir, autostart_file)
        if not os.path.isfile(autostart_path):
            # Look for desktop file
            desktop_file_path = None
            desktop_file_directory = "/usr/share/applications"
            fullpath = os.path.normpath(os.path.join(desktop_file_directory, autostart_file))
            if os.path.isfile(fullpath):
                desktop_file_path = fullpath
            # If we've found the desktop file, create symlink
            if desktop_file_path:
                if not os.path.exists(autostart_dir):
                    os.mkdir(autostart_dir)
                if os.path.isdir(autostart_dir):
                    log.debug("Installing autostart file.")
                    os.symlink(desktop_file_path, autostart_path)
                    #if desktop_file_path
                    #if not os.path.isfile(autostart_path)

    #def check_autostart(self)

    def create_menu(self):
        self.menu = gtk.Menu()
        # Create menu items
        ##Grab screen area
        screen_area_grab = gtk.MenuItem("Select screen area to grab...")
        self.menu.append(screen_area_grab)
        screen_area_grab.connect("activate", self.grab_screen_area)
        screen_area_grab.show()

        ##Open http://imgur.com in the browser
        open_site_url = gtk.MenuItem("Open Imgur")
        self.menu.append(open_site_url)
        open_site_url.connect("activate", self.open_site)
        open_site_url.show()

        ##Widget for grabbing files
        grab_files = gtk.MenuItem("Show/hide File Grabber")
        grab_files.connect("activate", self.toggle_file_grabber)
        grab_files.show()
        self.menu.append(grab_files)

        ##Breaker
        breaker = gtk.SeparatorMenuItem()
        breaker.show()
        self.menu.append(breaker)

        ##About
        about_show = gtk.MenuItem("About...")
        about_show.connect("activate", self.about)
        about_show.show()
        self.menu.append(about_show)

        ##Quit
        quit = gtk.ImageMenuItem(gtk.STOCK_QUIT)
        quit.connect("activate", self.quit)
        quit.show()
        self.menu.append(quit)

        self.ind.set_menu(self.menu)

    #def create_menu(self)

    ##########################################################################
    def grab_screen_area(self, widget):
        ScreenGrabber(self.select_area_event_handler)

    def select_area_event_handler(self, widget, event, selector):
        if event.type == gtk.gdk.MOTION_NOTIFY:
            selector.redraw(event.x, event.y)
        elif event.type == gtk.gdk.BUTTON_PRESS and event.button == 1:
            selector.start_selection(event.x, event.y)
        elif event.type == gtk.gdk.BUTTON_RELEASE and event.button == 1:
            selector.stop_selection(event.x, event.y)
            selector.set_complete_handler(self.take_screen_of_area_complete_handler)
            selector.__del__()
            del selector
        elif (event.type == gtk.gdk.BUTTON_PRESS and event.button == 3) or (
                    event.type == gtk.gdk.KEY_PRESS and event.keyval == gtk.gdk.keyval_from_name('Escape')):
            selector.__del__()
            del selector

    def take_screen_of_area_complete_handler(self, x, y, width, height):
        root = gtk.gdk.get_default_root_window()
        pixbuf = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, width, height)
        pixbuf = pixbuf.get_from_drawable(root, root.get_colormap(), x, y, 0, 0, width, height)
        self.gtk_screen_image = pixbuf
        # Call preview window
        self.preview_screen_of_area()

    def upload_from_pixmap(self):
        (fp, temp_img_file) = tempfile.mkstemp()
        self.gtk_screen_image.save(temp_img_file, "png")
        self.file_grabber.upload_file(temp_img_file, True)

    def preview_screen_of_area(self):
        def response(dialog, resp_id):
            if resp_id == gtk.RESPONSE_UPLOAD:
                self.upload_from_pixmap()

        image = self.gtk_screen_image
        gtk.RESPONSE_UPLOAD = 123
        gtk.stock_add([(gtk.STOCK_GO_UP, "Upload", 0, 0, '')])
        self.preview_dialog = preview_dialog = gtk.Dialog(title="Preview screenshot",
                                                          flags=gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                                                          buttons=(
                                                              gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,
                                                              gtk.STOCK_GO_UP, gtk.RESPONSE_UPLOAD))
        preview_dialog.set_modal(True)
        preview_dialog.set_decorated(False)
        # Scale image for preview
        preview_image_width = float(image.get_width())
        preview_image_height = float(image.get_height())
        MAX_WIDTH = 600
        MAX_HEIGHT = 400
        if preview_image_width / preview_image_height > MAX_WIDTH / MAX_HEIGHT:
            preview_image_height = int(round((MAX_WIDTH / preview_image_width) * preview_image_height))
            preview_image_width = MAX_WIDTH
        else:
            preview_image_width = int(round((MAX_HEIGHT / preview_image_height) * preview_image_width))
            preview_image_height = MAX_HEIGHT
        preview_image = image.scale_simple(preview_image_width, preview_image_height, gtk.gdk.INTERP_BILINEAR)
        widget_image = gtk.image_new_from_pixbuf(preview_image)
        widget_image.show()
        preview_dialog.vbox.add(widget_image)
        preview_dialog.connect('response', response)
        preview_dialog.run()
        preview_dialog.destroy()

    ##########################################################################
    def open_site(self, widget):
        webbrowser.open('https://imgur.com/')

    ##########################################################################
    def toggle_file_grabber(self, widget):
        self.file_grabber.toggle_window()

    ##########################################################################
    def about(self, widget):
        log.debug("Indicator: open About dialog")
        self.about_dialog = gtk.AboutDialog()
        self.about_dialog.set_name("Fileshare Indicator")
        self.about_dialog.set_version(VERSION)

        ifile = open("/usr/share/doc/indicator-fileshare/AUTHORS", "r")
        self.about_dialog.set_copyright(ifile.read().replace('\x0c', ''))
        ifile.close()

        self.about_dialog.set_website("http://aikikode.github.com/fileshare/")
        logo_path = "/usr/local/share/indicator-fileshare/media/app_icon.png"
        self.about_dialog.set_logo(gtk.gdk.pixbuf_new_from_file(logo_path))
        self.about_dialog.connect("response", self.about_close)
        self.about_dialog.show()

    #def about(self, widget)

    def about_close(self, widget, event=None):
        log.debug("Indicator: closing About dialog")
        self.about_dialog.destroy()

    ##########################################################################
    # Quit the applet
    def quit(self, widget, data=None):
        log.debug("Indicator: Quitting")
        gtk.main_quit()

#class IndicatorFileshare(threading.Thread)


##############################################################################
class FileGrabber():
    """ Applet for drag'n'drop files to. The file is automatically uploaded to
        the hosting and the result URL is copied into the clipboard """

    def __init__(self):
        self.cb = gtk.Clipboard()
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_decorated(False)
        self.window.set_opacity(0.5)
        self.window.set_size_request(FILE_GRABBER_SIZE, FILE_GRABBER_SIZE)
        self.window.set_resizable(False)
        self.window.drag_dest_set(0, [], 0)

        self.window.set_gravity(gtk.gdk.GRAVITY_NORTH_EAST)
        width, height = self.window.get_size()
        self.window.move(gtk.gdk.screen_width() - width - 20, height)

        # Add main widget for grabbing files
        self.image = gtk.Image()
        pixbuf = gtk.gdk.pixbuf_new_from_file("/usr/local/share/indicator-fileshare/media/imgur.png")
        scaled_buf = pixbuf.scale_simple(FILE_GRABBER_SIZE, FILE_GRABBER_SIZE, gtk.gdk.INTERP_BILINEAR)
        self.image.set_from_pixbuf(scaled_buf)
        self.image.show()
        self.window.add(self.image)
        self.window.connect('drag_motion', self.window_drag_motion)
        self.window.connect('drag_drop', self.window_drag_drop)
        self.window.connect('drag_data_received', self.window_drag_data_received)
        self.isShown = False

    def toggle_window(self):
        if self.isShown:
            self.window.hide()
            self.isShown = False
        else:
            self.window.show()
            self.window.set_keep_above(True)    # This may not work: it depends on the window manager
            self.isShown = True

    def window_drag_motion(self, wid, context, x, y, time):
        context.drag_status(gtk.gdk.ACTION_COPY, time)
        return True      # True means "I accept this data"

    def window_drag_drop(self, wid, context, x, y, time):
        wid.drag_get_data(context, context.targets[-1], time)
        return True

    def window_drag_data_received(self, wid, context, x, y, data, info, time):
        file_to_upload = data.get_text().splitlines()[0].replace("file://", "")
        context.finish(True, False, time)
        self.upload_file(file_to_upload, False)

    def upload_file(self, image, remove=False):
        def upload_callback(image, remove):
            log.debug("Uploading file: " + image)
            self.response = ''
            self.base64String = self.img2base64(image)
            self.curl = curl = pycurl.Curl()
            curl.setopt(pycurl.URL, 'https://api.imgur.com/3/image.xml')
            curl.setopt(pycurl.USERAGENT, 'Mozilla/5.0 Nanoshot')
            curl.setopt(pycurl.POST, 1)
            curl.setopt(pycurl.HTTPHEADER, ["Authorization: Client-ID " + CLIENT_ID])
            curl.setopt(pycurl.HTTPPOST, [('image', self.base64String)])
            curl.setopt(pycurl.WRITEFUNCTION, self.write)
            self.curl.perform()
            log.debug("Response: " + self.response)
            self.show_result()
            if remove:
                os.remove(image)
            return False  # return False not to be called again as callback

        # convert file name to utf-8
        file_to_upload = image.decode('UTF-8').encode('UTF-8')
        # convert %80%20 and other to cyrillic symbols and spaces
        file_to_upload = urllib2.unquote(file_to_upload)
        gobject.idle_add(upload_callback, file_to_upload, remove)

    #def upload_file(self, image, remove = False)

    def img2base64(self, image):
        with open(image, "rb") as image_file:
            encoded_string = base64.b64encode(image_file.read())
        return encoded_string

    def write(self, string):
        self.response += string

    def show_result(self):
        self.dom = xml.dom.minidom.parseString(self.response)
        links = []
        link = self.dom.getElementsByTagName('link')
        if not link:
            return
        links.append(('link', link[0].firstChild.nodeValue))
        log.debug(links)
        url = links[0][1]
        self.cb.set_text(url)
        self.cb.store()
        # create a window with result URL
        result_window = gtk.Window()
        result_window.set_decorated(False)
        result_window.set_opacity(0.9)
        result_window.set_resizable(False)
        result_window.set_gravity(gtk.gdk.GRAVITY_NORTH_EAST)
        width, height = result_window.get_size()
        result_window.move(gtk.gdk.screen_width() - width - 20, height)
        l = gtk.Label()
        l.set_text(url + " copied")
        l.show()
        result_window.add(l)
        result_window.show()
        # close the window with URL in 5 seconds
        gobject.timeout_add(5000, result_window.hide)
        #def show_result(self)

#class FileGrabber()


##############################################################################
class ScreenGrabber(threading.Thread):
    def __init__(self, eventHandler):
        threading.Thread.__init__(self)
        log.debug("ScreenGrabber: creating")
        self.selected = False
        root = gtk.gdk.get_default_root_window()
        self.screenWidth, self.screenHeight = root.get_size()
        width, height = self.screenWidth, self.screenHeight
        self.drawingWindow = drawingWindow = gtk.Window(gtk.WINDOW_POPUP)
        drawingWindow.set_type_hint(gtk.gdk.WINDOW_TYPE_HINT_SPLASHSCREEN)
        drawingWindow.set_decorated(False)
        drawingWindow.set_has_frame(False)
        drawingWindow.set_skip_taskbar_hint(True)
        drawingWindow.set_skip_pager_hint(True)
        drawingWindow.set_can_focus(True)
        drawingWindow.set_accept_focus(True)
        drawingWindow.set_keep_above(True)
        drawingWindow.set_default_size(width, height)
        drawingWindow.resize(width, height)
        drawingWindow.move(0, 0)
        rgba = drawingWindow.get_screen().get_rgba_colormap()
        drawingWindow.set_app_paintable(True)
        drawingWindow.set_colormap(rgba)
        drawingWindow.set_events(gtk.gdk.POINTER_MOTION_MASK |
                                 gtk.gdk.BUTTON_PRESS_MASK |
                                 gtk.gdk.BUTTON_RELEASE_MASK |
                                 gtk.gdk.KEY_PRESS_MASK)
        drawingWindow.show()
        drawingWindow.present()
        gtk.gdk.keyboard_grab(drawingWindow.window)
        cursor = gtk.gdk.Cursor(gtk.gdk.CROSSHAIR)
        drawingWindow.window.set_cursor(cursor)
        self.cursor = 'crosshair'
        drawingWindow.connect_after('expose-event', self.expose_event)
        drawingWindow.connect('button-press-event', eventHandler, self)
        drawingWindow.connect('button-release-event', eventHandler, self)
        drawingWindow.connect('key-press-event', eventHandler, self)
        drawingWindow.connect('motion-notify-event', eventHandler, self)

    def __del__(self):
        if hasattr(self, 'deleted'):
            return True
        ctx = self.drawingWindow.window.cairo_create()
        self.clear(ctx)
        gtk.gdk.keyboard_ungrab()
        # Give cairo some time to clear the screen before the destruction of the window
        gobject.timeout_add(50, self.drawingWindow.destroy)
        if self.selected and hasattr(self, 'completeHandler'):
            x = int(round(min(self.selection_x_start, self.selection_x_end)))
            y = int(round(min(self.selection_y_start, self.selection_y_end)))
            width = int(round(abs(self.selection_x_end - self.selection_x_start)))
            height = int(round(abs(self.selection_y_end - self.selection_y_start)))
            # Do not take screen shot if grabbed area is too small
            if width > 10 and height > 10:
                gobject.timeout_add(150, self.completeHandler, x, y, width, height)
            else:
                log.debug("ScreenGrabber: selected area is too small")
        self.deleted = True

    def start_selection(self, x, y):
        self.selection_x_start = x
        self.selection_y_start = y
        self.selected = True
        self.dark_fill()

    def stop_selection(self, x, y):
        self.selection_x_end = x
        self.selection_y_end = y
        self.drawingWindow.present()

    def redraw(self, x, y):
        if not self.selected:
            return False
            # recalculate the selected rectangle
        rLefx = min(self.selection_x_start, x)
        rTopy = min(self.selection_y_start, y)
        rRigx = max(self.selection_x_start, x)
        rBoty = max(self.selection_y_start, y)
        width = rRigx - rLefx
        height = rBoty - rTopy
        ctx = self.drawingWindow.window.cairo_create()
        # shade the whole screen
        ctx.rectangle(0, 0, self.screenWidth, self.screenHeight)
        ctx.clip()
        ctx.new_path()
        ctx.set_operator(cairo.OPERATOR_SOURCE)
        ctx.set_antialias(cairo.ANTIALIAS_NONE)
        ctx.set_source_rgba(0.0, 0.0, 0.0, 0.5)
        ctx.paint()
        # draw border
        ctx.set_source_rgba(255.0, 255.0, 255.0, 0.7)
        ctx.rectangle(rLefx, rTopy, width, height)
        ctx.fill()
        ctx.set_source_rgba(0.0, 0.0, 0.0, 0.0)
        ctx.rectangle(rLefx + 1, rTopy + 1, width - 2, height - 2)
        ctx.fill()

    def clear(self, ctx):
        ctx.set_operator(cairo.OPERATOR_CLEAR)
        ctx.rectangle(0, 0, self.screenWidth, self.screenHeight)
        ctx.fill()
        return ctx

    def dark_fill(self):
        ctx = self.drawingWindow.window.cairo_create()
        ctx.set_operator(cairo.OPERATOR_SOURCE)
        ctx.set_source_rgba(0.0, 0.0, 0.0, 0.5)
        ctx.paint()

    def expose_event(self, widget, event):
        self.dark_fill()
        if self.selected:
            self.redraw(self.selection_x_end, self.selection_y_end)

    def set_complete_handler(self, completeHandler):
        self.completeHandler = completeHandler

#class ScreenGrabber(threading.Thread)


##############################################################################
def main():
    gtk.main()
    return 0


if __name__ == "__main__":
    # Enable and configure logs
    global log
    cachedir = os.environ.get('XDG_CACHE_HOME', '').strip()
    if not cachedir:
        cachedir = os.path.expanduser("~/.cache")
    log_filename = os.path.join(cachedir, "indicator-fileshare.log")
    log = logging.getLogger('IndicatorFileshare')
    log.propagate = False
    log.setLevel(logging.DEBUG)
    log_handler = logging.handlers.RotatingFileHandler(log_filename, maxBytes=1024 * 1024, backupCount=5)
    log_formatter = logging.Formatter("[%(threadName)s] %(asctime)s - %(levelname)s - %(message)s")
    log_handler.setFormatter(log_formatter)
    log.addHandler(log_handler)

    log.info("------------------------------")
    log.info("Started Fileshare Indicator")
    log.info("Fileshare Indicator version %s" % VERSION)

    # Single instance stuff for fileshare indicator
    myapp = SingleInstance("/tmp/indicator-fileshare-%d.pid" % os.getuid())
    # Check is another instance of same program running
    if myapp.is_already_running():
        log.info("Another instance of this program is already running")
        sys.exit("Another instance of this program is already running")

    di = IndicatorFileshare()
    main()
